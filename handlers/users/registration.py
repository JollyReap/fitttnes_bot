import validators
from aiogram import types
from aiogram.dispatcher import FSMContext
from utils.dp_api.models import Users
from keyboards.default.menu import menu
from keyboards.default.stop_autorise import stop
from loader import dp, db
from states.registration_states import Regisistration
from keyboards.default.del_acc import account


@dp.message_handler(text="‚ùå–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚ùå", state='*')
async def stop_autorise(call: types.Message, state: FSMContext):
    await call.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!',
                      reply_markup=menu)
    await state.finish()


@dp.message_handler(text="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüåê")
async def get_email(message: types.Message):
    if db.select_user(message.from_user.id):
        await message.answer('–û—Ç–ª–∏—á–Ω–æ!')
        await message.answer('–í–µ–¥–∏—Ç–µ –≤–∞—à emailüìß',
                             reply_markup=stop)
        await Regisistration.nickname_registration.set()
    else:
        await message.answer('–í—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ!\n'
                             '–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?',
                             reply_markup=account)


@dp.message_handler(state=Regisistration.nickname_registration)
async def create_nickname(message: types.Message, state: FSMContext):
    valid_email = validators.email(message.text)
    if valid_email is True:
        await message.answer('–î–æ–±–∞–≤–ª—è—é –≤ –±–∞–∑—É...\n'
                             '–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!',
                             reply_markup=stop)
        await state.update_data(email=message.text)
        await Regisistration.finaly_registration.set()
    else:
        await message.answer('–í–∞—à email –≤–µ–¥—ë–Ω –Ω–µ –≤–µ—Ä–Ω–æ!\n'
                             '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â—ë —Ä–∞–∑',
                             reply_markup=stop)
        if valid_email is True:
            await state.update_data(email=message.text)
            await Regisistration.nickname_registration.set()


@dp.message_handler(state=Regisistration.finaly_registration)
async def finaly(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get('email')
    password = data.get('password')
    nickname = message.text
    tg_id = str(message.from_user.id)
    dict_id = {'tg_id': tg_id,
               'email': email,
               'nickname': nickname}

    db.add_registration_info(data=dict_id, model=Users, filter_field='tg_id')
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!',
                         reply_markup=menu)
    await state.finish()
