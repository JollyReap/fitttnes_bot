from loader import dp
from aiogram import types
from states.registration_states import Regisistration
from aiogram.dispatcher import FSMContext
import validators
from keyboards.default.stop_autorise import stop
from keyboards.default.menu import menu


@dp.message_handler(text="‚ùå–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚ùå", state='*')
async def stop_autorise(call: types.Message, state: FSMContext):
    await call.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!',
                      reply_markup=menu)
    await state.finish()


@dp.message_handler(text="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüåê")
async def get_email(message: types.Message):
    await message.answer('–û—Ç–ª–∏—á–Ω–æ!')
    await message.answer('–í–µ–¥–∏—Ç–µ –≤–∞—à emailüìß',
                         reply_markup=stop)
    await Regisistration.password_registration.set()


@dp.message_handler(state=Regisistration.password_registration)
async def create_password(message: types.Message, state: FSMContext):
    valid_email = validators.email(message.text)
    email = message.text
    if valid_email is True:
        await message.answer('–î–æ–±–∞–≤–ª—è—é –≤ –±–∞–∑—É...\n'
                             '–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å',
                             reply_markup=stop)
        await state.update_data(email=email)
        await Regisistration.nickname_registration.set()
    else:
        await message.answer('–í–∞—à email –≤–µ–¥—ë–Ω –Ω–µ –≤–µ—Ä–Ω–æ!\n'
                             '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â—ë —Ä–∞–∑',
                             reply_markup=stop)
        if valid_email is True:
            await state.update_data(email=email)
            await Regisistration.nickname_registration.set()


@dp.message_handler(state=Regisistration.nickname_registration)
async def create_nickname(message: types.Message, state: FSMContext):
    password = message.text
    await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!',
                         reply_markup=stop)
    await state.update_data(password=password)
    await Regisistration.finaly_registration.set()


@dp.message_handler(state=Regisistration.finaly_registration)
async def finaly(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get('email')
    password = data.get('password')
    nickname = message.text
    await message.answer('–í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, —Å–æ–≤–µ—Ç—É–µ–º –∑–∞–Ω–µ—Å—Ç–∏ –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ!\n'
                         f'–í–∞—à email: {email}\n'
                         f'–í–∞—à –ø–∞—Ä–æ–ª—å: {password}\n'
                         f'–í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {nickname}')
    await state.finish()



